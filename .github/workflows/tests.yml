name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly on Sundays at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * 0'

env:
  COMPOSER_NO_INTERACTION: 1

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        php: [8.2, 8.3]
        laravel: [12.*]  # Laravel 12+ only
        dependency-version: [prefer-lowest, prefer-stable]
        include:
          - laravel: 12.*
            testbench: 10.*

    name: P${{ matrix.php }} - L${{ matrix.laravel }} - ${{ matrix.dependency-version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug
        tools: composer:v2

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ matrix.laravel }}-${{ hashFiles('**/composer.json') }}
        restore-keys: |
          ${{ runner.os }}-composer-${{ matrix.php }}-${{ matrix.laravel }}-
          ${{ runner.os }}-composer-${{ matrix.php }}-
          ${{ runner.os }}-composer-

    - name: Setup problem matchers
      run: |
        echo "::add-matcher::${{ runner.tool_cache }}/php.json"
        echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

    - name: Install dependencies
      run: |
        composer require "laravel/framework:${{ matrix.laravel }}" "orchestra/testbench:${{ matrix.testbench }}" --no-update
        composer update --${{ matrix.dependency-version }} --prefer-dist --no-progress --no-suggest

    - name: List Installed Dependencies
      run: composer show -D

    - name: Execute tests
      run: vendor/bin/pest --coverage --min=80 --coverage-clover=coverage.xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      if: matrix.php == '8.2' && matrix.laravel == '12.*' && matrix.dependency-version == 'prefer-stable'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false  # Don't fail CI if codecov fails
        token: ${{ secrets.CODECOV_TOKEN }}

  static-analysis:
    runs-on: ubuntu-latest
    
    name: Static Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3  # Use latest stable PHP for static analysis
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none
        tools: composer:v2

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-static-${{ hashFiles('**/composer.json') }}
        restore-keys: |
          ${{ runner.os }}-composer-static-
          ${{ runner.os }}-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Run PHPStan
      run: vendor/bin/phpstan analyse --memory-limit=2G --error-format=github

  code-style:
    runs-on: ubuntu-latest
    
    name: Code Style
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3  # Use latest stable PHP for code style
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none
        tools: composer:v2

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-style-${{ hashFiles('**/composer.json') }}
        restore-keys: |
          ${{ runner.os }}-composer-style-
          ${{ runner.os }}-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Check code style
      run: vendor/bin/pint --test

  security:
    runs-on: ubuntu-latest
    
    name: Security Audit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3  # Use latest stable PHP for security audit
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none
        tools: composer:v2

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-security-${{ hashFiles('**/composer.json') }}
        restore-keys: |
          ${{ runner.os }}-composer-security-
          ${{ runner.os }}-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Run security audit
      run: composer audit

  # New job for package validation
  package-validation:
    runs-on: ubuntu-latest
    
    name: Package Validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none
        tools: composer:v2

    - name: Validate composer.json
      run: composer validate --strict

    - name: Check composer.lock exists
      run: test -f composer.lock

    - name: Check if dependencies are up to date
      run: composer outdated --direct || true  # Allow outdated packages, just report them

  # New job for integration testing
  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    name: Integration Test (Fresh Laravel Install)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none
        tools: composer:v2

    - name: Create fresh Laravel project
      run: |
        composer create-project laravel/laravel:^12.0 fresh-laravel --prefer-dist --no-interaction
        cd fresh-laravel

    - name: Install package from source
      run: |
        cd fresh-laravel
        # Add local repository
        composer config repositories.local '{"type": "path", "url": "../", "options": {"symlink": false}}'
        composer require errly/laravel-errly:@dev --no-interaction

    - name: Test package installation
      run: |
        cd fresh-laravel
        php artisan list | grep errly
        php artisan errly:test --help

    - name: Test package functionality
      run: |
        cd fresh-laravel
        # Set up minimal config for testing
        echo 'ERRLY_SLACK_WEBHOOK_URL=https://hooks.slack.com/test' >> .env
        # Test command (should work even without real webhook)
        php artisan errly:test general || true  # Allow failure since webhook is fake